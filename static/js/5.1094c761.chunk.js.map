{"version":3,"sources":["../node_modules/@material-ui/core/esm/FormGroup/FormGroup.js","pages/Halidom/CheckboxGroup.jsx","pages/Halidom/HalidomList.jsx","pages/Halidom/Setting.jsx","pages/Halidom/Halidom.jsx","pages/Halidom/index.js"],"names":["forwardRef","props","ref","classes","className","_props$row","row","other","createElement","root","withStyles","display","flexDirection","flexWrap","name","CheckboxGroup","fieldset","checkAll","checkboxes","onChange","lang","React","useContext","Context","handleParent","useEventCallback","e","checked","target","newCheckboxes","map","item","handleChild","all","label","FormControlLabel","control","Checkbox","color","translate","key","defaultProps","memo","itemKey","columnIndex","rowIndex","data","cols","keyArray","HalidomList","elements","weapons","windowWidth","width","filters","HALIDOM_LIST","filter","some","f","includes","rows","Math","ceil","length","height","itemData","columnCount","rowCount","columnWidth","rowHeight","HalidomItem","arr","actionCreators","updateSetting","connect","halidom","useState","collapse","setCollapse","level","useMemo","sum","Number","dracolith","dragontree","smithy","rupie","i","value","parseInt","cn","clsx","makeCheckedArr","Array","isArray","clearCheckedArr","makeFilters","reduce","prev","curr","elementDisabled","setElementDisabled","ELEMENTS","setElements","weaponDisabled","setWeaponDisabled","WEAPONS","setWeapons","elementFilters","setElementFilters","weaponFilters","setWeaponFilters","handleClear","currentTarget","useEffect","id","Button","variant","onClick","btns","disabled","Halidom"],"mappings":"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","file":"static/js/5.1094c761.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  /* Styles applied to the root element if `row={true}`. */\n  row: {\n    flexDirection: 'row'\n  }\n};\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nvar FormGroup = React.forwardRef(function FormGroup(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$row = props.row,\n      row = _props$row === void 0 ? false : _props$row,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"row\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, row && classes.row),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   */\n  row: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormGroup'\n})(FormGroup);","/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { Context } from 'components';\nimport { translate, useEventCallback } from 'utils';\n\nconst defaultProps = {\n  label: '',\n  checkAll: true,\n  checkboxes: null,\n};\n\nfunction CheckboxGroup({ fieldset, checkAll, checkboxes, onChange }) {\n  const { lang } = React.useContext(Context);\n  const handleParent = useEventCallback(e => {\n    const { checked } = e.target;\n    const newCheckboxes = checkboxes.map(item => ({ ...item, checked }));\n    onChange({ checkAll: checked, checkboxes: newCheckboxes });\n  });\n\n  const handleChild = useEventCallback(e => {\n    const { name, checked } = e.target;\n    let all = true;\n    const newCheckboxes = checkboxes.map(item => {\n      if (item.label === name) {\n        if (all && !checked) all = false;\n        return { ...item, checked };\n      }\n\n      if (all && !item.checked) all = false;\n      return item;\n    });\n\n    onChange({ checkAll: all, checkboxes: newCheckboxes });\n  });\n\n  return (\n    <div className=\"checkbox-group\">\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checkAll}\n            color=\"primary\"\n            onChange={handleParent}\n          />\n        }\n        label={translate(fieldset, lang)}\n      />\n\n      <FormGroup>\n        {checkboxes &&\n          checkboxes.map(item => (\n            <FormControlLabel\n              key={item.label}\n              control={\n                <Checkbox\n                  name={item.label}\n                  checked={item.checked}\n                  color=\"primary\"\n                  onChange={handleChild}\n                />\n              }\n              label={translate(item.label, lang)}\n            />\n          ))}\n      </FormGroup>\n    </div>\n  );\n}\n\nCheckboxGroup.defaultProps = defaultProps;\n\nexport default React.memo(CheckboxGroup);\n","import React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeGrid } from 'react-window';\nimport { Context, HalidomItem } from 'components';\nimport { HALIDOM_LIST } from 'data';\n\nfunction itemKey({ columnIndex, rowIndex, data: { cols, keyArray } }) {\n  return (\n    keyArray[cols * rowIndex + columnIndex] || `${rowIndex}_${columnIndex}`\n  );\n}\n\nconst defaultProps = {\n  weapons: [],\n  elements: [],\n};\n\nfunction HalidomList({ elements, weapons }) {\n  const { width: windowWidth } = React.useContext(Context);\n\n  const filters = [...elements, ...weapons];\n  const keyArray = HALIDOM_LIST.filter(item => {\n    return filters.some(f => item.includes(f));\n  });\n\n  const cols = windowWidth > 700 ? 2 : 1;\n\n  const data = { cols, keyArray };\n  const rows = Math.ceil(keyArray.length / cols);\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <FixedSizeGrid\n          width={width}\n          height={height}\n          itemData={data}\n          itemKey={itemKey}\n          columnCount={cols}\n          rowCount={rows}\n          columnWidth={width / cols - 8}\n          rowHeight={100}\n        >\n          {HalidomItem}\n        </FixedSizeGrid>\n      )}\n    </AutoSizer>\n  );\n}\n\nHalidomList.defaultProps = defaultProps;\n\nexport default React.memo(HalidomList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport clsx from 'clsx';\nimport { Checkbox, HalidomSetting, Input } from 'components';\nimport { HALIDOM_LIST } from 'data';\nimport { updateSetting } from 'actions';\nimport { useEventCallback } from 'utils';\n\nconst arr = ['smithy', 'dragontree', 'dracolith', 'rupie'];\n\n// eslint-disable-next-line no-shadow\nfunction Setting({ halidom, updateSetting }) {\n  const [collapse, setCollapse] = React.useState(false);\n\n  const level = React.useMemo(() => {\n    let sum =\n      Number(halidom.dracolith) +\n      Number(halidom.dragontree) +\n      Number(halidom.smithy) +\n      Number(halidom.rupie);\n\n    for (let i = 0; i < HALIDOM_LIST.length; i += 1) {\n      const key = HALIDOM_LIST[i];\n      sum += halidom[key].level;\n    }\n    return sum;\n  }, [halidom]);\n\n  const onChange = useEventCallback(e => {\n    const { name, value } = e.target;\n    updateSetting({ name, value: parseInt(value, 10) || '' });\n  });\n\n  const cn = clsx('col-2', 'animated-collapse', { collapse: !collapse });\n\n  return (\n    <>\n      <HalidomSetting />\n\n      <div className=\"col-2\">\n        <Checkbox checked={collapse} label=\"Setting\" onChange={setCollapse} />\n        <div className=\"center\">Total : {level}</div>\n      </div>\n\n      <div className={cn}>\n        {arr.map(key => {\n          return (\n            <Input\n              key={key}\n              label={key}\n              value={halidom[key]}\n              onChange={onChange}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ halidom }) => {\n  return { halidom };\n};\n\nconst actionCreators = { updateSetting };\n\nexport default connect(\n  mapStateToProps,\n  actionCreators\n)(Setting);\n","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { ELEMENTS, WEAPONS, HALIDOM_TYPES } from 'data';\nimport { Button } from '@material-ui/core';\nimport { CheckBtns, Checkbox } from 'components';\nimport CheckboxGroup from './CheckboxGroup';\nimport HalidomList from './HalidomList';\nimport Setting from './Setting';\n\nconst makeCheckedArr = arr => {\n  if (!arr || !Array.isArray(arr)) return [];\n\n  return arr.map(label => ({ label, checked: false }));\n};\n\nconst clearCheckedArr = arr => {\n  return arr.map(item => ({ ...item, checked: false }));\n};\n\nconst makeFilters = arr => {\n  if (!arr || !Array.isArray(arr)) return [];\n\n  return arr.reduce(\n    (prev, curr) => (curr.checked ? [...prev, curr.label] : prev),\n    []\n  );\n};\n\nfunction Halidom() {\n  const [elementDisabled, setElementDisabled] = useState(false);\n  const [elements, setElements] = useState(makeCheckedArr(ELEMENTS));\n\n  const [weaponDisabled, setWeaponDisabled] = useState(false);\n  const [weapons, setWeapons] = useState(makeCheckedArr(WEAPONS));\n\n  // const [types, setTypes] = useState(() => ({\n  //   checkAll: true,\n  //   checkboxes: makeCheckboxes(HALIDOM_TYPES.filter(t => t !== 'dojo')),\n  // }));\n\n  const [elementFilters, setElementFilters] = useState([]);\n  const [weaponFilters, setWeaponFilters] = useState([]);\n\n  const handleClear = e => {\n    const { name } = e.currentTarget;\n    if (name === 'element' && !elementDisabled) {\n      setElements(prev => clearCheckedArr(prev));\n    } else if (name === 'weapon' && !weaponDisabled) {\n      setWeapons(prev => clearCheckedArr(prev));\n    }\n  };\n\n  useEffect(() => {\n    let filters = [];\n    if (!elementDisabled) {\n      filters = makeFilters(elements);\n      if (filters.length === 0) filters = ELEMENTS;\n    }\n\n    setElementFilters(filters);\n  }, [elements, elementDisabled]);\n\n  useEffect(() => {\n    let filters = [];\n    if (!weaponDisabled) {\n      filters = makeFilters(weapons);\n      if (filters.length === 0) filters = WEAPONS;\n    }\n\n    setWeaponFilters(filters);\n  }, [weapons, weaponDisabled]);\n\n  return (\n    <main id=\"halidom\">\n      <div>\n        <Setting />\n\n        <div className=\"col-2\">\n          <Checkbox\n            label=\"disable\"\n            checked={elementDisabled}\n            onChange={setElementDisabled}\n          />\n\n          <Button variant=\"outlined\" name=\"element\" onClick={handleClear}>\n            CLEAR\n          </Button>\n        </div>\n        <CheckBtns\n          btns={elements}\n          disabled={elementDisabled}\n          name=\"element\"\n          onChange={setElements}\n        />\n\n        <div className=\"col-2\">\n          <Checkbox\n            label=\"disable\"\n            checked={weaponDisabled}\n            onChange={setWeaponDisabled}\n          />\n\n          <Button variant=\"outlined\" name=\"weapon\" onClick={handleClear}>\n            CLEAR\n          </Button>\n        </div>\n        <CheckBtns\n          btns={weapons}\n          disabled={weaponDisabled}\n          name=\"weapon\"\n          onChange={setWeapons}\n        />\n      </div>\n      <div>\n        <HalidomList elements={elementFilters} weapons={weaponFilters} />\n      </div>\n    </main>\n  );\n}\n\nexport default React.memo(Halidom);\n","import Halidom from './Halidom';\n\nexport default Halidom;\n"],"sourceRoot":""}