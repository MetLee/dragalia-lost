{"version":3,"sources":["pages/Facility/FacilityItem.jsx","pages/Facility/MaterialItem.jsx","pages/Facility/Facility.jsx","pages/Facility/index.js"],"names":["FacilityItem","index","item","setFacility","max","React","useMemo","getLimit","type","setValue","useCallback","value","prev","map","f","i","className","field","image","id","onClick","filter","_","memo","columnIndex","rowIndex","style","data","dict","key","arr","qty","btns","getKey","keyDict","sumArray","sum","start","end","useState","open","setOpen","loadState","facility","useEventCallback","e","currentTarget","name","removeState","backup","saveState","onCreate","needs","forEach","Object","entries","material","itemArr","keys","ref","refs","col3","height","width","itemData","columnCount","columnWidth","rowCount","length","rowHeight","MaterialItem","Facility"],"mappings":"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","file":"static/js/6.2545dd39.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { Image, Slider } from 'components';\nimport { getLimit } from 'utils';\n\nfunction FacilityItem({ index, item, setFacility }) {\n  const max = React.useMemo(() => getLimit(item.type), [item.type]);\n  const removeItem = () => {\n    setFacility(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // const onChange = value => {\n  //   setFacility(prev =>\n  //     prev.map((f, i) => {\n  //       return i === index ? { ...f, value } : f;\n  //     })\n  //   );\n  // };\n\n  // const setValue = useCallback(\n  //   value => {\n  //     setFacility(prev =>\n  //       prev.map((f, i) => {\n  //         return i === index ? { ...f, value } : f;\n  //       })\n  //     );\n  //   },\n  //   [setFacility]\n  // );\n\n  const setValue = useCallback(\n    value => {\n      setFacility(prev =>\n        prev.map((f, i) => {\n          return i === index ? { ...f, value } : f;\n        })\n      );\n    },\n    [index, setFacility]\n  );\n\n  return (\n    <div className=\"facility-item\">\n      <Image field=\"facility\" image={item.id} onClick={removeItem} />\n      <Slider max={max} value={item.value} setValue={setValue} />\n    </div>\n  );\n}\n\nexport default FacilityItem;\n","import React from 'react';\nimport { Image } from 'components';\n\nfunction MaterialItem({ columnIndex, rowIndex, style, data: { dict, arr } }) {\n  const key = arr[2 * rowIndex + columnIndex];\n  const qty = dict[key];\n  return (\n    <>\n      {qty && (\n        <div style={style} className=\"material-item\">\n          <Image field=\"material\" image={key} />\n          <div>{qty}</div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default React.memo(MaterialItem);\n","import React, { useState } from 'react';\nimport { FixedSizeGrid } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { IconBtns, Dialog } from 'components';\nimport {\n  refs,\n  getLimit,\n  loadState,\n  removeState,\n  saveState,\n  useEventCallback,\n} from 'utils';\nimport { material, keyDict } from 'data';\nimport FacilityItem from './FacilityItem';\nimport MaterialItem from './MaterialItem';\n\nconst btns = ['del', 'refresh', 'save', 'add'];\n\nconst getKey = (type, field) => {\n  switch (type) {\n    case 'rupies':\n    case 'event':\n    case 'item':\n    case 'coin1':\n    case 'coin2':\n    case 'coin3':\n    case 'talonstone':\n      return keyDict[type];\n    default:\n      return keyDict[type][field];\n  }\n};\n\nconst sumArray = (arr, value) => {\n  let sum = 0;\n  const [start, end] = value;\n  for (let i = start; i < end; i += 1) {\n    sum += arr[i];\n  }\n\n  return sum;\n};\n\nfunction Facility() {\n  const [open, setOpen] = useState(false);\n  const [facility, setFacility] = useState(loadState('facility') || []);\n\n  const onClick = useEventCallback(e => {\n    switch (e.currentTarget.name) {\n      case 'add':\n        setOpen(true);\n        break;\n      case 'del': {\n        setFacility([]);\n        removeState('facility');\n        break;\n      }\n      case 'refresh': {\n        const backup = loadState('facility');\n        if (backup) {\n          setFacility(backup);\n        }\n        break;\n      }\n      case 'save':\n        saveState('facility', facility);\n        break;\n      default:\n        break;\n    }\n  });\n\n  const onCreate = useEventCallback(({ type, field }) => {\n    const id = type === 'event' ? 'event' : keyDict[type][field];\n    const max = getLimit(type);\n    setFacility(prev => [...prev, { id, type, field, value: [0, max] }]);\n  });\n\n  const needs = React.useMemo(() => {\n    const dict = {};\n    facility.forEach(f => {\n      if (f.value[0] !== f.value[1]) {\n        Object.entries(material[f.type]).forEach(([item, itemArr]) => {\n          const qty = sumArray(itemArr, f.value);\n          if (qty !== 0) {\n            const key = getKey(item, f.field);\n            dict[key] = (dict[key] || 0) + qty;\n          }\n        });\n      }\n    });\n    return { dict, arr: Object.keys(dict) };\n  }, [facility]);\n\n  return (\n    <main id=\"facility\">\n      <div>\n        <IconBtns btns={btns} onClick={onClick} />\n        <div>\n          {facility.map((f, i) => {\n            return (\n              <FacilityItem\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                index={i}\n                item={f}\n                setFacility={setFacility}\n              />\n            );\n          })}\n        </div>\n        <Dialog open={open} setOpen={setOpen} onCreate={onCreate} />\n      </div>\n\n      <div ref={refs.col3}>\n        <AutoSizer>\n          {({ height, width }) => (\n            <FixedSizeGrid\n              width={width}\n              height={height}\n              itemData={needs}\n              columnCount={2}\n              columnWidth={width / 2 - 8}\n              rowCount={needs.arr.length}\n              rowHeight={64}\n            >\n              {MaterialItem}\n            </FixedSizeGrid>\n          )}\n        </AutoSizer>\n      </div>\n    </main>\n  );\n}\n\nexport default React.memo(Facility);\n","import Facility from './Facility';\n\nexport default Facility;\n"],"sourceRoot":""}