{"version":3,"sources":["pages/Halidom/HalidomList.jsx","pages/Halidom/Setting.jsx","pages/Halidom/Halidom.jsx","pages/Halidom/index.js"],"names":["itemKey","columnIndex","rowIndex","data","cols","keyArray","HalidomList","elements","weapons","windowWidth","React","useContext","Context","width","filters","HALIDOM_LIST","filter","item","some","f","includes","rows","Math","ceil","length","height","itemData","columnCount","rowCount","columnWidth","rowHeight","HalidomItem","defaultProps","memo","arr","actionCreators","updateSetting","connect","halidom","useState","collapse","setCollapse","level","useMemo","sum","Number","dracolith","dragontree","smithy","rupie","i","key","onChange","useEventCallback","e","target","name","value","parseInt","cn","clsx","className","FormControlLabel","control","Checkbox","color","checked","label","map","elementDisabled","setElementDisabled","makeCheckedArr","setElements","weaponDisabled","setWeaponDisabled","setWeapons","elementFilters","setElementFilters","weaponFilters","setWeaponFilters","handleClear","currentTarget","prev","clearCheckedArr","useEffect","makeFilters","disabled","id","Button","variant","onClick","btns","setChecked","Halidom"],"mappings":"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","file":"static/js/6.408d2588.chunk.js","sourcesContent":["import React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeGrid } from 'react-window';\nimport { Context, HalidomItem } from 'components';\nimport { HALIDOM_LIST } from 'data';\n\nfunction itemKey({ columnIndex, rowIndex, data: { cols, keyArray } }) {\n  return (\n    keyArray[cols * rowIndex + columnIndex] || `${rowIndex}_${columnIndex}`\n  );\n}\n\nconst defaultProps = {\n  weapons: [],\n  elements: [],\n};\n\nfunction HalidomList({ elements, weapons }) {\n  const { width: windowWidth } = React.useContext(Context);\n\n  const filters = [...elements, ...weapons];\n  const keyArray = HALIDOM_LIST.filter(item => {\n    return filters.some(f => item.includes(f));\n  });\n\n  const cols = windowWidth > 700 ? 2 : 1;\n\n  const data = { cols, keyArray };\n  const rows = Math.ceil(keyArray.length / cols);\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <FixedSizeGrid\n          width={width}\n          height={height}\n          itemData={data}\n          itemKey={itemKey}\n          columnCount={cols}\n          rowCount={rows}\n          columnWidth={width / cols - 8}\n          rowHeight={100}\n        >\n          {HalidomItem}\n        </FixedSizeGrid>\n      )}\n    </AutoSizer>\n  );\n}\n\nHalidomList.defaultProps = defaultProps;\n\nexport default React.memo(HalidomList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FormControlLabel, Checkbox } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { HalidomSetting, Input } from 'components';\nimport { HALIDOM_LIST } from 'data';\nimport { updateSetting } from 'actions';\nimport { useEventCallback } from 'utils';\n\nconst arr = ['smithy', 'dragontree', 'dracolith', 'rupie'];\n\n// eslint-disable-next-line no-shadow\nfunction Setting({ halidom, updateSetting }) {\n  const [collapse, setCollapse] = React.useState(false);\n\n  const handleCollapse = e => {\n    setCollapse(e.target.checked);\n  };\n\n  const level = React.useMemo(() => {\n    let sum =\n      Number(halidom.dracolith) +\n      Number(halidom.dragontree) +\n      Number(halidom.smithy) +\n      Number(halidom.rupie);\n\n    for (let i = 0; i < HALIDOM_LIST.length; i += 1) {\n      const key = HALIDOM_LIST[i];\n      sum += halidom[key].level;\n    }\n    return sum;\n  }, [halidom]);\n\n  const onChange = useEventCallback(e => {\n    const { name, value } = e.target;\n    updateSetting({ name, value: parseInt(value, 10) || '' });\n  });\n\n  const cn = clsx('col-2', 'animated-collapse', { collapse: !collapse });\n\n  return (\n    <>\n      <HalidomSetting />\n\n      <div className=\"col-2\">\n        {/* <Checkbox\n          checked={collapse}\n          icon={false}\n          label=\"setting\"\n          setChecked={setCollapse}\n        /> */}\n\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"primary\"\n              checked={collapse}\n              onChange={handleCollapse}\n            />\n          }\n          label=\"setting\"\n        />\n\n        <div className=\"center\">Total : {level}</div>\n      </div>\n\n      <div className={cn}>\n        {arr.map(key => {\n          return (\n            <Input\n              key={key}\n              label={key}\n              value={halidom[key]}\n              onChange={onChange}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ halidom }) => {\n  return { halidom };\n};\n\nconst actionCreators = { updateSetting };\n\nexport default connect(\n  mapStateToProps,\n  actionCreators\n)(Setting);\n","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { FormControlLabel, Checkbox, Button } from '@material-ui/core';\nimport { CheckBtns } from 'components';\nimport { makeCheckedArr, clearCheckedArr, makeFilters } from 'utils/filters';\nimport HalidomList from './HalidomList';\nimport Setting from './Setting';\n\nfunction Halidom() {\n  const [elementDisabled, setElementDisabled] = useState(false);\n  const [elements, setElements] = useState(makeCheckedArr('element'));\n\n  const [weaponDisabled, setWeaponDisabled] = useState(false);\n  const [weapons, setWeapons] = useState(makeCheckedArr('weapon'));\n\n  const [elementFilters, setElementFilters] = useState([]);\n  const [weaponFilters, setWeaponFilters] = useState([]);\n\n  const handleClear = e => {\n    const { name } = e.currentTarget;\n    if (name === 'element' && !elementDisabled) {\n      setElements(prev => clearCheckedArr(prev));\n    } else if (name === 'weapon' && !weaponDisabled) {\n      setWeapons(prev => clearCheckedArr(prev));\n    }\n  };\n\n  useEffect(() => {\n    const filters = makeFilters({\n      arr: elements,\n      name: 'element',\n      disabled: elementDisabled,\n    });\n\n    setElementFilters(filters);\n  }, [elements, elementDisabled]);\n\n  useEffect(() => {\n    const filters = makeFilters({\n      arr: weapons,\n      name: 'weapon',\n      disabled: weaponDisabled,\n    });\n\n    setWeaponFilters(filters);\n  }, [weapons, weaponDisabled]);\n\n  const handleEleDis = e => {\n    setElementDisabled(e.target.checked);\n  };\n\n  const handleWeaponDis = e => {\n    setWeaponDisabled(e.target.checked);\n  };\n\n  return (\n    <main id=\"halidom\">\n      <div>\n        <Setting />\n\n        <div className=\"col-2\">\n          {/* <Checkbox\n            icon={false}\n            label=\"disable\"\n            checked={elementDisabled}\n            setChecked={setElementDisabled}\n          /> */}\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={elementDisabled}\n                onChange={handleEleDis}\n              />\n            }\n            label=\"disable\"\n          />\n          <Button variant=\"outlined\" name=\"element\" onClick={handleClear}>\n            CLEAR\n          </Button>\n        </div>\n        <CheckBtns\n          btns={elements}\n          disabled={elementDisabled}\n          name=\"element\"\n          setChecked={setElements}\n        />\n\n        <div className=\"col-2\">\n          {/* <Checkbox\n            icon={false}\n            label=\"disable\"\n            checked={weaponDisabled}\n            setChecked={setWeaponDisabled}\n          /> */}\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={weaponDisabled}\n                onChange={handleWeaponDis}\n              />\n            }\n            label=\"disable\"\n          />\n\n          <Button variant=\"outlined\" name=\"weapon\" onClick={handleClear}>\n            CLEAR\n          </Button>\n        </div>\n        <CheckBtns\n          btns={weapons}\n          disabled={weaponDisabled}\n          name=\"weapon\"\n          setChecked={setWeapons}\n        />\n      </div>\n      <div>\n        <HalidomList elements={elementFilters} weapons={weaponFilters} />\n      </div>\n    </main>\n  );\n}\n\nexport default React.memo(Halidom);\n","import Halidom from './Halidom';\n\nexport default Halidom;\n"],"sourceRoot":""}